mean = ~mean(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
total = ~sum(., na.rm = TRUE)
)
))
}
# Function to create histogram
create_histogram <- function(data, x_var, facet_vars, title) {
ggplot(data, aes(x = {{x_var}})) +
geom_histogram(fill = "blue", color = "black") +
facet_wrap(vars(!!!syms(facet_vars))) +
theme_minimal() +
labs(title = title, x = deparse(substitute(x_var)), y = "Frequency")
}
# Function to create boxplot
create_boxplot <- function(data, x_var, y_var, facet_var, title) {
ggplot(data, aes(x = factor({{x_var}}), y = log({{y_var}}))) +
geom_boxplot(fill = "blue", color = "black") +
facet_wrap(vars({{facet_var}})) +
theme_minimal() +
labs(title = title, x = deparse(substitute(x_var)), y = paste("Log", deparse(substitute(y_var))))
}
# Function to create scatter plot
create_scatter <- function(data, x_var, y_var, color_var, facet_var, title) {
ggplot(data, aes(x = {{x_var}}, y = {{y_var}}, color = factor({{color_var}}))) +
geom_point() +
facet_wrap(vars({{facet_var}})) +
theme_minimal() +
labs(title = title, x = deparse(substitute(x_var)), y = deparse(substitute(y_var)))
}
# Function to remove outliers
remove_outliers <- function(data, column = "transaction_count", factor = 1.5) {
# Calculate Q1, Q3, and IQR
Q1 <- quantile(data[[column]], 0.25)
Q3 <- quantile(data[[column]], 0.75)
IQR <- Q3 - Q1
# Define lower and upper bounds
lower_bound <- Q1 - factor * IQR
upper_bound <- Q3 + factor * IQR
# Remove outliers
data_clean <- data[data[[column]] >= lower_bound & data[[column]] <= upper_bound, ]
# Print summary of removed data
removed_count <- nrow(data) - nrow(data_clean)
removed_percentage <- removed_count / nrow(data) * 100
cat(sprintf("Removed %d rows as outliers (%.2f%% of the data)\n", removed_count, removed_percentage))
data_clean
}
# R @4.1.2 is used
rm(list = ls())
# For reproducability, renv is used.
# renv::activate()
# renv::restore()
# Load libraries ----------------------------------------------------------
packages <- c('tidyverse',
'lares',
'mgcv',
'data.table',
'MASS',
'broom')
lapply(packages, function(x){
if(!requireNamespace(x, quietly = TRUE)) install.packages(x);
suppressPackageStartupMessages(library(x, character.only = T))}
)
# Source ------------------------------------------------------------------
# functions
source("000_functions.R")
# set constants
source("01_set_constants.R")
# Input
source("02_input.R")
# Exploratory data analysis and ANOVA tests
source("03_eda_tests.R")
# Modelling without splitting by user activity groups
source("04_modelling_whole.R")
# R @4.1.2 is used
rm(list = ls())
# For reproducability, renv is used.
# renv::activate()
# renv::restore()
# Load libraries ----------------------------------------------------------
packages <- c('tidyverse',
'lares',
'mgcv',
'data.table',
'MASS',
'broom')
lapply(packages, function(x){
if(!requireNamespace(x, quietly = TRUE)) install.packages(x);
suppressPackageStartupMessages(library(x, character.only = T))}
)
# Source ----------------------------
# Functions ---------------------------------------------------------------
# Function to perform k-means on a subset
perform_kmeans <- function(subset, columns, n_centers = 3, group_col_name = "cluster_group") {
kmeans_result <- kmeans(subset[, columns, with = FALSE], centers = n_centers)
subset[, (group_col_name) := kmeans_result$cluster]
subset
}
# Function to perform ANOVA
perform_anova <- function(data, pair_id, col, user_activity_group = NULL) {
subset_data <- data %>%
filter(pair_id == pair_id) %>%
{if (!is.null(user_activity_group)) filter(., user_activity_group == user_activity_group) else .}
anova_result <- aov(transaction_count ~ factor(eval(sym(col))), data = subset_data)
anova_summary <- tidy(anova_result)
tukey_result <- TukeyHSD(anova_result)
tukey_summary <- tidy(tukey_result)
list(anova_summary = anova_summary, tukey_summary = tukey_summary)
}
# Function to fit models and extract results
fit_and_extract <- function(data, pair, user_group = NULL, regressor) {
# Negative Binomial Model
nb_formula <- as.formula(paste("transaction_count ~", regressor))
nb_model <- glm.nb(nb_formula, data = data)
# GAM Model
gam_formula <- as.formula(paste("transaction_count ~ s(", regressor, ")"))
gam_model <- gam(gam_formula, family = nb(), data = data)
# Extract results
nb_results <- tidy(nb_model)
gam_results <- tidy(gam_model)
aic_comparison <- tibble(
model = c("Negative Binomial", "GAM"),
AIC = c(AIC(nb_model), AIC(gam_model))
)
# Generate predictions for NB model plot
new_data <- tibble(!!sym(regressor) := seq(min(data[[regressor]]),
max(data[[regressor]]),
length.out = 100))
nb_predictions <- predict(nb_model, newdata = new_data, type = "response")
# Create a combined data frame for the lines
lines_data <- tibble(
!!sym(regressor) := as.data.frame(new_data)[, 1],
nb_predictions = nb_predictions,
gam_predictions = predict(gam_model, new_data)
)
# Plot with legend
plot <- ggplot(data, aes_string(x = regressor, y = "transaction_count")) +
geom_point(alpha = 0.1) +
geom_line(data = lines_data, aes_string(x = regressor, y = "nb_predictions", color = '"Negative Binomial Model"'), size = 1) +
geom_smooth(method = "gam", formula = y ~ s(x), method.args = list(family = nb), aes_string(color = '"GAM Model"'), size = 1) +
labs(
title = paste("GAM and NB models -", pair, "-", user_group),
x = paste0(regressor),
y = "Transaction Count",
color = "Model"
) +
scale_color_manual(values = c("Negative Binomial Model" = "forestgreen", "GAM Model" = "steelblue"))
# Display the plot
print(plot)
list(
pair = pair,
user_activity_group = user_group,
nb_results = nb_results,
gam_results = gam_results,
aic_comparison = aic_comparison,
plot = plot
)
}
# Function for summary statistics
summary_stats <- function(df, group_cols) {
df %>%
group_by(across(all_of(group_cols))) %>%
summarise(across(
transaction_count,
list(
mean = ~mean(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
total = ~sum(., na.rm = TRUE)
)
))
}
# Function to create histogram
create_histogram <- function(data, x_var, facet_vars, title) {
ggplot(data, aes(x = {{x_var}})) +
geom_histogram(fill = "blue", color = "black") +
facet_wrap(vars(!!!syms(facet_vars))) +
theme_minimal() +
labs(title = title, x = deparse(substitute(x_var)), y = "Frequency")
}
# Function to create boxplot
create_boxplot <- function(data, x_var, y_var, facet_var, title) {
ggplot(data, aes(x = factor({{x_var}}), y = log({{y_var}}))) +
geom_boxplot(fill = "blue", color = "black") +
facet_wrap(vars({{facet_var}})) +
theme_minimal() +
labs(title = title, x = deparse(substitute(x_var)), y = paste("Log", deparse(substitute(y_var))))
}
# Function to create scatter plot
create_scatter <- function(data, x_var, y_var, color_var, facet_var, title) {
ggplot(data, aes(x = {{x_var}}, y = {{y_var}}, color = factor({{color_var}}))) +
geom_point() +
facet_wrap(vars({{facet_var}})) +
theme_minimal() +
labs(title = title, x = deparse(substitute(x_var)), y = deparse(substitute(y_var)))
}
# Function to remove outliers
remove_outliers <- function(data, column = "transaction_count", factor = 1.5) {
# Calculate Q1, Q3, and IQR
Q1 <- quantile(data[[column]], 0.25)
Q3 <- quantile(data[[column]], 0.75)
IQR <- Q3 - Q1
# Define lower and upper bounds
lower_bound <- Q1 - factor * IQR
upper_bound <- Q3 + factor * IQR
# Remove outliers
data_clean <- data[data[[column]] >= lower_bound & data[[column]] <= upper_bound, ]
# Print summary of removed data
removed_count <- nrow(data) - nrow(data_clean)
removed_percentage <- removed_count / nrow(data) * 100
cat(sprintf("Removed %d rows as outliers (%.2f%% of the data)\n", removed_count, removed_percentage))
data_clean
}
# set constants
source("01_set_constants.R")
# Input
source("02_input.R")
# Exploratory data analysis and ANOVA tests
source("03_eda_tests.R")
# Modelling without splitting by user activity groups
source("04_modelling_whole.R")
# Model without spliting by users activity groups -------------------------
# # |---- Trasanction costs ----
# Fit models for each pair
model_results_cost <- transactional_activity_cost_whole %>%
group_by(pair_name) %>%
group_map(~fit_and_extract(.x, .y$pair_name, regressor = 'transaction_cost_pct')) %>%
set_names(
transactional_activity_cost_split %>%
group_by(pair_name) %>%
group_keys() %>%
mutate(name = paste(pair_name, sep = " - ")) %>%
pull(name)
)
# # |---- FX-Rate ----
# Fit models for each pair
model_results_fx <- transactional_activity_fx_rate_whole %>%
group_by(pair_name) %>%
group_map(~fit_and_extract(.x, .y$pair_name, regressor = 'fx_rate')) %>%
set_names(
transactional_activity_cost_split %>%
group_by(pair_name) %>%
group_keys() %>%
mutate(name = paste(pair_name, sep = " - ")) %>%
pull(name)
)
model_results_cost$`GBP-RON`$pair
model_results_cost$`GBP-RON`$user_activity_group
model_results_cost$`GBP-RON`$nb_results
print(model_results_cost$`GBP-RON`$nb_results)
print(model_results_cost$`GBP-RON`$gam_results)
# Summarize results across all pairs
summary_results_cost <- map_dfr(model_results_cost, ~tibble(
pair = paste0(.x$pair, " - ", .x$user_activity_group),
nb_aic = .x$aic_comparison$AIC[1],
gam_aic = .x$aic_comparison$AIC[2],
nb_transaction_cost_pct_effect = .x$nb_results$estimate[.x$nb_results$term == "transaction_cost_pct"],
gam_edf = .x$gam_results$edf[.x$gam_results$term == "s(transaction_cost_pct)"]
))
summary_results_fx <- map_dfr(model_results_fx, ~tibble(
pair = paste0(.x$pair, " - ", .x$user_activity_group),
nb_aic = .x$aic_comparison$AIC[1],
gam_aic = .x$aic_comparison$AIC[2],
nb_fx_rate_effect = .x$nb_results$estimate[.x$nb_results$term == "fx_rate"],
gam_edf = .x$gam_results$edf[.x$gam_results$term == "s(fx_rate)"]
))
View(summary_results_cost)
summary_results_fx <- map_dfr(model_results_fx, ~tibble(
pair = paste0(.x$pair, " - ", .x$user_activity_group),
nb_aic = .x$aic_comparison$AIC[1],
gam_aic = .x$aic_comparison$AIC[2],
nb_fx_rate_effect = .x$nb_results$estimate[.x$nb_results$term == "fx_rate"],
gam_edf = .x$gam_results$edf[.x$gam_results$term == "s(fx_rate)"]
))
View(summary_results_fx)
print(model_results_fx$`GBP-RON`$nb_results)
print(model_results_fx$`GBP-RON`$gam_results)
print(model_results_cost$`PLN-UAH`$nb_results)
print(model_results_cost$`PLN-UAH`$gam_results)
print(model_results_cost$`GBP-RON`$plot)
print(model_results_cost$`PLN-UAH`$plot)
print(model_results_fx$`GBP-RON`$plot)
# Model with spliting by users activity groups -------------------------
# # |---- Trasanction costs ----
# Fit models for each pair
model_results_cost_split <- transactional_activity_cost_split %>%
group_by(pair_name, user_activity_group) %>%
group_map(~fit_and_extract(.x, .y$pair_name, .y$user_activity_group ,regressor = 'transaction_cost_pct')) %>%
set_names(
transactional_activity_cost_split %>%
group_by(pair_name, user_activity_group) %>%
group_keys() %>%
mutate(name = paste(pair_name, user_activity_group, sep = " - ")) %>%
pull(name)
)
# GBP-RON pair
## Low activity users
print(model_results_cost_split$`GBP-RON - low-activity-users`$nb_results)
print(model_results_cost_split$`GBP-RON - low-activity-users`$plot)
# GBP-RON pair
## Medium activity users
print(model_results_cost_split$`GBP-RON - medium-activity-users`$nb_results)
print(model_results_cost_split$`GBP-RON - medium-activity-users`$gam_results)
print(model_results_cost_split$`GBP-RON - medium-activity-users`$plot)
# GBP-RON pair
## High activity users
print(model_results_cost_split$`GBP-RON - high-activity-users`$nb_results)
print(model_results_cost_split$`GBP-RON - high-activity-users`$gam_results)
print(model_results_cost_split$`GBP-RON - high-activity-users`$plot)
# PLN-UAH pair
## Low activity users
print(model_results_cost_split$`PLN-UAH - low-activity-users`$nb_results)
print(model_results_cost_split$`PLN-UAH - low-activity-users`$gam_results)
print(model_results_cost_split$`PLN-UAH - low-activity-users`$plot)
# PLN-UAH pair
## Medium activity users
print(model_results_cost_split$`PLN-UAH - medium-activity-users`$nb_results)
print(model_results_cost_split$`PLN-UAH - medium-activity-users`$gam_results)
print(model_results_cost_split$`PLN-UAH - medium-activity-users`$plot)
# PLN-UAH pair
## High activity users
print(model_results_cost_split$`PLN-UAH - high-activity-users`$nb_results)
print(model_results_cost_split$`PLN-UAH - high-activity-users`$gam_results)
print(model_results_cost_split$`PLN-UAH - high-activity-users`$plot)
# GBP-RON pair
## Medium activity users
print(model_results_fx_split$`GBP-RON - medium-activity-users`$nb_results)
print(model_results_fx_split$`GBP-RON - medium-activity-users`$gam_results)
print(model_results_fx_split$`GBP-RON - medium-activity-users`$plot)
# # |---- FX-Rate ----
# Fit models for each pair
model_results_fx_split <- transactional_activity_fx_rate_whole %>%
group_by(pair_name) %>%
group_map(~fit_and_extract(.x, .y$pair_name, regressor = 'fx_rate')) %>%
set_names(
transactional_activity_cost_split %>%
group_by(pair_name) %>%
group_keys() %>%
mutate(name = paste(pair_name, sep = " - ")) %>%
pull(name)
)
# GBP-RON pair
## Low activity users
print(model_results_cost_split$`GBP-RON - low-activity-users`$nb_results)
print(model_results_cost_split$`GBP-RON - low-activity-users`$gam_results)
print(model_results_cost_split$`GBP-RON - low-activity-users`$plot)
# GBP-RON pair
## Medium activity users
print(model_results_fx_split$`GBP-RON - medium-activity-users`$nb_results)
print(model_results_fx_split$`GBP-RON - medium-activity-users`$gam_results)
print(model_results_fx_split$`GBP-RON - medium-activity-users`$plot)
# GBP-RON pair
## High activity users
print(model_results_fx_split$`GBP-RON - high-activity-users`$nb_results)
print(model_results_fx_split$`GBP-RON - high-activity-users`$gam_results)
# # |---- FX-Rate ----
# Fit models for each pair
model_results_fx_split <- transactional_activity_fx_rate_whole %>%
group_by(pair_name) %>%
group_map(~fit_and_extract(.x, .y$pair_name, regressor = 'fx_rate')) %>%
set_names(
transactional_activity_cost_split %>%
group_by(pair_name) %>%
group_keys() %>%
mutate(name = paste(pair_name, sep = " - ")) %>%
pull(name)
)
# # |---- FX-Rate ----
# Fit models for each pair
model_results_fx_split <- transactional_activity_fx_rate_split %>%
group_by(pair_name, user_activity_group) %>%
group_map(~fit_and_extract(.x, .y$pair_name, .y$user_activity_group ,regressor = 'fx_rate')) %>%
set_names(
transactional_activity_cost_split %>%
group_by(pair_name, user_activity_group) %>%
group_keys() %>%
mutate(name = paste(pair_name, user_activity_group, sep = " - ")) %>%
pull(name)
)
# GBP-RON pair
## Low activity users
print(model_results_cost_split$`GBP-RON - low-activity-users`$nb_results)
print(model_results_cost_split$`GBP-RON - low-activity-users`$gam_results)
print(model_results_cost_split$`GBP-RON - low-activity-users`$plot)
# GBP-RON pair
## Medium activity users
print(model_results_fx_split$`GBP-RON - medium-activity-users`$nb_results)
print(model_results_fx_split$`GBP-RON - medium-activity-users`$gam_results)
print(model_results_fx_split$`GBP-RON - medium-activity-users`$plot)
# GBP-RON pair
## High activity users
print(model_results_fx_split$`GBP-RON - high-activity-users`$nb_results)
print(model_results_fx_split$`GBP-RON - high-activity-users`$gam_results)
print(model_results_fx_split$`GBP-RON - high-activity-users`$plot)
# PLN-UAH pair
## Low activity users
print(model_results_fx_split$`PLN-UAH - low-activity-users`$nb_results)
print(model_results_fx_split$`PLN-UAH - low-activity-users`$gam_results)
print(model_results_fx_split$`PLN-UAH - low-activity-users`$plot)
# PLN-UAH pair
## Medium activity users
print(model_results_fx_split$`PLN-UAH - medium-activity-users`$nb_results)
print(model_results_fx_split$`PLN-UAH - medium-activity-users`$gam_results)
print(model_results_fx_split$`PLN-UAH - medium-activity-users`$plot)
# PLN-UAH pair
## High activity users
print(model_results_fx_split$`PLN-UAH - high-activity-users`$nb_results)
print(model_results_fx_split$`PLN-UAH - high-activity-users`$gam_results)
print(model_results_fx_split$`PLN-UAH - high-activity-users`$plot)
# # |---- Summary ----
# Summarize results across all pairs
summary_results_cost_split <- map_dfr(model_results_cost_split, ~tibble(
pair = paste0(.x$pair, " - ", .x$user_activity_group),
nb_aic = .x$aic_comparison$AIC[1],
gam_aic = .x$aic_comparison$AIC[2],
nb_transaction_cost_pct_effect = .x$nb_results$estimate[.x$nb_results$term == "transaction_cost_pct"],
gam_edf = .x$gam_results$edf[.x$gam_results$term == "s(transaction_cost_pct)"]
))
summary_results_fx_split <- map_dfr(model_results_fx_split, ~tibble(
pair = paste0(.x$pair, " - ", .x$user_activity_group),
nb_aic = .x$aic_comparison$AIC[1],
gam_aic = .x$aic_comparison$AIC[2],
nb_fx_rate_effect = .x$nb_results$estimate[.x$nb_results$term == "fx_rate"],
gam_edf = .x$gam_results$edf[.x$gam_results$term == "s(fx_rate)"]
))
# View summary results
print(summary_results)
# View summary results
print(summary_results_cost_split)
# R @4.1.2 is used
rm(list = ls())
# For reproducability, renv is used.
# renv::activate()
# renv::restore()
# Load libraries ----------------------------------------------------------
packages <- c('tidyverse',
'lares',
'mgcv',
'data.table',
'MASS',
'broom')
lapply(packages, function(x){
if(!requireNamespace(x, quietly = TRUE)) install.packages(x);
suppressPackageStartupMessages(library(x, character.only = T))}
)
# Source ------------------------------------------------------------------
# functions
source("000_functions.R")
# set constants
source("01_set_constants.R")
# Input
source("02_input.R")
# Exploratory data analysis and ANOVA tests
source("03_eda_tests.R")
# Modelling without splitting by user activity groups
source("04_modelling_whole.R")
# Modelling with splitting by user activity groups
source("05_modelling_groups.R")
# # Input -------------------------------------------------------------------
# # |---- Read data ----
# Read the CSV file
data <- fread(data_path) %>%
# Calculate transaction cost (%)
.[, `:=`(
date = as.Date(created_at),
transaction_cost_pct = round((payment_amount * (fx_rate - mid_market_fx_rate)) / (payment_amount * mid_market_fx_rate) * 100, 4),
transaction_cost_pct_with_delivery_fee = round((payment_amount * (fx_rate - mid_market_fx_rate) + delivery_option_fee) / (payment_amount * mid_market_fx_rate) * 100, 4),
fx_rate = round(fx_rate, 3),
spread = fx_rate - mid_market_fx_rate
)] %>%
.[, pair_id := .GRP, by = .(from_country, to_country)]
# Calculate aggregate revenue margin on daily level
revenue_margin <- data %>%
.[, created_at := as.Date(created_at)] %>%
.[, `:=`(
revenue = payment_amount + delivery_option_fee,
costs = (payment_amount * fx_rate) / mid_market_fx_rate
)] %>%
.[, .(
daily_revenue = sum(revenue),
daily_costs = sum(costs)
), by = created_at] %>%
.[, daily_revenue_margin := (daily_revenue - daily_costs) / daily_revenue * 100]
data$pair_id
unique(data$pair_id)
View(revenue_margin)
renv::snapshot()
renv::restore()
# For reproducability, renv is used.
renv::activate()
renv::restore()
packages <- c('tidyverse',
'lares',
'mgcv',
'data.table',
'MASS',
'broom')
lapply(packages, function(x){
if(!requireNamespace(x, quietly = TRUE)) install.packages(x);
suppressPackageStartupMessages(library(x, character.only = T))}
)
# functions
source("000_functions.R")
# set constants
source("01_set_constants.R")
# Input
source("02_input.R")
# Exploratory data analysis and ANOVA tests
source("03_eda_tests.R")
# Modelling without splitting by user activity groups
source("04_modelling_whole.R")
# Modelling with splitting by user activity groups
source("05_modelling_groups.R")
